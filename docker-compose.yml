version: '3.7'

services:

    grav:
        image: '${PHP_IMAGE_NAME}'
        container_name: grav
        networks:
            - backend
        volumes:
            - 'html:${WEBSERVER_DOC_ROOT}'
            - type: bind
              source: ./php-fpm/php/conf.d/security.ini
              target: '${PHP_INI_DIR_PREFIX}/php/conf.d/security.ini'
            - type: bind
              source: ./php-fpm/php-fpm.d/z-www.conf
              target: '${PHP_INI_DIR_PREFIX}/php-fpm.d/z-www.conf'
        hostname: grav
        restart: unless-stopped
        ports:
            - '9000:80'
        links:
            - redis
        healthcheck:
            test: ["CMD-SHELL", "curl -fk https://${DOMAIN_NAME} || exit 1"]
            interval: 10s
            timeout: 5s
            retries: 9
            start_period: 100s
        environment:
            TZ: '${LOCAL_TIMEZONE}'
        labels:            
            - 'docker-volume-backup.stop-during-backup=true'
        command: >
            bash -c "apt-get -y update && apt-get install -y --no-install-recommends unzip libfreetype6-dev libjpeg62-turbo-dev libpng-dev libyaml-dev libzip4 libzip-dev zlib1g-dev libicu-dev libxml2-dev g++ git cron vim && rm -rf /var/lib/apt/lists/* && 
            docker-php-ext-configure gd --with-freetype --with-jpeg && docker-php-ext-install -j$(nproc) gd intl opcache zip ctype dom json session simplexml && 
            if pecl install -p -- redis; then pecl install -o -f redis && rm -rf /tmp/pear && docker-php-ext-enable redis; fi && if pecl install -p -- yaml; then pecl install -o -f yaml && rm -rf /tmp/pear && docker-php-ext-enable yaml; fi && 
            curl -sS https://getcomposer.org/installer | php && mv composer.phar /usr/local/bin/composer; if [ -f \"${WEBSERVER_DOC_ROOT}/index.php\" ]; then composer update --working-dir=${WEBSERVER_DOC_ROOT}; else rm -f ${WEBSERVER_DOC_ROOT}/README.md && composer create-project getgrav/grav ${WEBSERVER_DOC_ROOT} && bin/gpm install antimatter admin && chown www-data:www-data -R ${WEBSERVER_DOC_ROOT}; fi; grep -qe 'date.timezone = ${LOCAL_TIMEZONE}' ${PHP_INI_DIR_PREFIX}/php/conf.d/security.ini || echo 'date.timezone = ${LOCAL_TIMEZONE}' >> ${PHP_INI_DIR_PREFIX}/php/conf.d/security.ini; php-fpm"

    webserver:
        depends_on:
            - grav
        image: 'httpd:latest'
        container_name: webserver
        networks:
            - backend            
        volumes:
            - 'html:${WEBSERVER_DOC_ROOT}'
            - type: bind
              source: ./webserver
              target: '${HTTPD_PREFIX}/conf'            
        hostname: webserver
        restart: unless-stopped
        ports:
            - '8080:80'
        links:
            - grav
        environment:
            TZ: '${LOCAL_TIMEZONE}'
        command: bash -c "sed -i 's/example.com/${DOMAIN_NAME}/g' ${HTTPD_PREFIX}/conf/extra/httpd-vhosts.conf && httpd -t; httpd-foreground"
    
    certbot:
        depends_on:
            - proxy
        image: certbot/certbot
        container_name: certbot
        networks:
            - backend
        volumes:
            - 'certbot-etc:${LETSENCRYPT_CONF_PREFIX}'
            - 'certbot-var:/var/lib/letsencrypt'
            - '/tmp/acme-challenge:/tmp/acme-challenge'                        
        restart: unless-stopped        
        environment:
            TZ: '${LOCAL_TIMEZONE}'
        entrypoint: /bin/sh -c "certbot certonly --webroot --webroot-path /tmp/acme-challenge --rsa-key-size 4096 --non-interactive --agree-tos --no-eff-email --force-renewal --email ${LETSENCRYPT_EMAIL} -d ${DOMAIN_NAME} -d www.${DOMAIN_NAME}; 
            trap exit TERM; while :; do certbot renew --dry-run; sleep 12h & wait $${!}; done;"

    proxy:
        depends_on:
            - webserver
        image: nginx:stable
        container_name: proxy
        networks:
            - backend
            - frontend
        volumes:
            - type: bind
              source: ./proxy/nginx.conf
              target: '${PROXY_PREFIX}/nginx.conf'
            - type: bind
              source: ./proxy/templates/proxy.conf.template
              target: '${PROXY_PREFIX}/templates/default.conf.template'
            - type: bind
              source: ./proxy/ssl-option/options-ssl-nginx.conf
              target: '${LETSENCRYPT_CONF_PREFIX}/options-ssl-nginx.conf'
            - type: bind
              source: ./ssl-proxyconf.sh
              target: '/tmp/ssl-proxyconf.sh'
            - 'certbot-etc:${LETSENCRYPT_CONF_PREFIX}'
            - '/tmp/acme-challenge:/tmp/acme-challenge'
        hostname: proxy
        restart: unless-stopped
        ports:
            - '80:80'
            - '443:443'
        links:
            - webserver
        environment:
            NGINX_HOST: ${DOMAIN_NAME}
            NGINX_PORT: 80
            TZ: '${LOCAL_TIMEZONE}'
        command: bash -c "/docker-entrypoint.sh nginx -v; sh /tmp/ssl-proxyconf.sh '${DOMAIN_NAME}' '${LETSENCRYPT_CONF_PREFIX}' '${PROXY_PREFIX}'"
    
    redis:
        image: 'redis:latest'
        container_name: redis
        networks:
            - backend
        volumes:
            - 'dtredis:/data'
            - type: bind
              source: ./redis
              target: '${REDIS_CONF_PREFIX}/redis'
        hostname: redis
        sysctls:
            - net.core.somaxconn=512
        restart: unless-stopped
        ports:
            - '6379:6379'
        environment:
            ALLOW_EMPTY_PASSWORD: 'yes'
            TZ: '${LOCAL_TIMEZONE}'
        command: "redis-server ${REDIS_CONF_PREFIX}/redis/redis.conf"
    
    backup:
        image: offen/docker-volume-backup:latest
        container_name: backup
        networks:
            - backend
        volumes:
            - 'html:/backup/html:ro'
            - '/var/run/docker.sock:/var/run/docker.sock:ro'
            - type: bind
              source: ./backups
              target: /archive
        hostname: backup
        restart: unless-stopped
        environment:
            BACKUP_CRON_EXPRESSION: '20 01 * * *'
            BACKUP_FILENAME: 'backup-%Y-%m-%dT%H-%M-%S.tar.gz'
            BACKUP_RETENTION_DAYS: '7'
            BACKUP_EXCLUDE_REGEXP: 'webapp/fuel|\\.log$$'    

networks:
    backend: null
    frontend: null

volumes:
    html:
        name: grav-html
        driver: local
        driver_opts:
            type: none
            device: ${DIRECTORY_PATH}/grav
            o: bind
    dtredis:
        name: redis-data
    certbot-etc:
        external: true        
    certbot-var:
        name: certbot-var
